import numpy as np
import pickle
data = np.array([[    0.,   100.,   100.,   500.,   200.,   300.,   500.,   800.,
          500.,  1300.,   500.,   200.,   500.,   300.,   500.,   500.,
          400.,   100.,   300.,   300.,   100.,   400.,   300.,   100.],
       [  100.,     0.,   100.,   200.,   100.,   400.,   200.,   400.,
          200.,   600.,   200.,   100.,   300.,   100.,   100.,   400.,
          200.,     0.,   100.,   100.,     0.,   100.,     0.,     0.],
       [  100.,   100.,     0.,   200.,   100.,   300.,   100.,   200.,
          100.,   300.,   300.,   200.,   100.,   100.,   100.,   200.,
          100.,     0.,     0.,     0.,     0.,   100.,   100.,     0.],
       [  500.,   200.,   200.,     0.,   500.,   400.,   400.,   700.,
          700.,  1200.,  1400.,   600.,   600.,   500.,   500.,   800.,
          500.,   100.,   200.,   300.,   200.,   400.,   500.,   200.],
       [  200.,   100.,   100.,   500.,     0.,   200.,   200.,   500.,
          800.,  1000.,   500.,   200.,   200.,   100.,   200.,   500.,
          200.,     0.,   100.,   100.,   100.,   200.,   100.,     0.],
       [  300.,   400.,   300.,   400.,   200.,     0.,   400.,   800.,
          400.,   800.,   400.,   200.,   200.,   100.,   200.,   900.,
          500.,   100.,   200.,   300.,   100.,   200.,   100.,   100.],
       [  500.,   200.,   100.,   400.,   200.,   400.,     0.,  1000.,
          600.,  1900.,   500.,   700.,   400.,   200.,   500.,  1400.,
         1000.,   200.,   400.,   500.,   200.,   500.,   200.,   100.],
       [  800.,   400.,   200.,   700.,   500.,   800.,  1000.,     0.,
          800.,  1600.,   800.,   600.,   600.,   400.,   600.,  2200.,
         1400.,   300.,   700.,   900.,   400.,   500.,   300.,   200.],
       [  500.,   200.,   100.,   700.,   800.,   400.,   600.,   800.,
            0.,  2800.,  1400.,   600.,   600.,   600.,   900.,  1400.,
          900.,   200.,   400.,   600.,   300.,   700.,   500.,   200.],
       [ 1300.,   600.,   300.,  1200.,  1000.,   800.,  1900.,  1600.,
         2800.,     0.,  4000.,  2000.,  1900.,  2100.,  4000.,  4400.,
         3900.,   700.,  1800.,  2500.,  1200.,  2600.,  1800.,   800.],
       [  500.,   200.,   300.,  1500.,   500.,   400.,   500.,   800.,
         1400.,  3900.,     0.,  1400.,  1000.,  1600.,  1400.,  1400.,
         1000.,   100.,   400.,   600.,   400.,  1100.,  1300.,   600.],
       [  200.,   100.,   200.,   600.,   200.,   200.,   700.,   600.,
          600.,  2000.,  1400.,     0.,  1300.,   700.,   700.,   700.,
          600.,   200.,   300.,   400.,   300.,   700.,   700.,   500.],
       [  500.,   300.,   100.,   600.,   200.,   200.,   400.,   600.,
          600.,  1900.,  1000.,  1300.,     0.,   600.,   700.,   600.,
          500.,   100.,   300.,   600.,   600.,  1300.,   800.,   800.],
       [  300.,   100.,   100.,   500.,   100.,   100.,   200.,   400.,
          600.,  2100.,  1600.,   700.,   600.,     0.,  1300.,   700.,
          700.,   100.,   300.,   500.,   400.,  1200.,  1100.,   400.],
       [  500.,   100.,   100.,   500.,   200.,   200.,   500.,   600.,
         1000.,  4000.,  1400.,   700.,   700.,  1300.,     0.,  1200.,
         1500.,   200.,   800.,  1100.,   800.,  2600.,  1000.,   400.],
       [  500.,   400.,   200.,   800.,   500.,   900.,  1400.,  2200.,
         1400.,  4400.,  1400.,   700.,   600.,   700.,  1200.,     0.,
         2800.,   500.,  1300.,  1600.,   600.,  1200.,   500.,   300.],
       [  400.,   200.,   100.,   500.,   200.,   500.,  1000.,  1400.,
          900.,  3900.,  1000.,   600.,   500.,   700.,  1500.,  2800.,
            0.,   600.,  1700.,  1700.,   600.,  1700.,   600.,   300.],
       [  100.,     0.,     0.,   100.,     0.,   100.,   200.,   300.,
          200.,   700.,   200.,   200.,   100.,   100.,   200.,   500.,
          600.,     0.,   300.,   400.,   100.,   300.,   100.,     0.],
       [  300.,   100.,     0.,   200.,   100.,   200.,   400.,   700.,
          400.,  1800.,   400.,   300.,   300.,   300.,   800.,  1300.,
         1700.,   300.,     0.,  1200.,   400.,  1200.,   300.,   100.],
       [  300.,   100.,     0.,   300.,   100.,   300.,   500.,   900.,
          600.,  2500.,   600.,   500.,   600.,   500.,  1100.,  1600.,
         1700.,   400.,  1200.,     0.,  1200.,  2400.,   700.,   400.],
       [  100.,     0.,     0.,   200.,   100.,   100.,   200.,   400.,
          300.,  1200.,   400.,   300.,   600.,   400.,   800.,   600.,
          600.,   100.,   400.,  1200.,     0.,  1800.,   700.,   500.],
       [  400.,   100.,   100.,   400.,   200.,   200.,   500.,   500.,
          700.,  2600.,  1100.,   700.,  1300.,  1200.,  2600.,  1200.,
         1700.,   300.,  1200.,  2400.,  1800.,     0.,  2100.,  1100.],
       [  300.,     0.,   100.,   500.,   100.,   100.,   200.,   300.,
          500.,  1800.,  1300.,   700.,   800.,  1100.,  1000.,   500.,
          600.,   100.,   300.,   700.,   700.,  2100.,     0.,   700.],
       [  100.,     0.,     0.,   200.,     0.,   100.,   100.,   200.,
          200.,   800.,   600.,   500.,   700.,   400.,   400.,   300.,
          300.,     0.,   100.,   400.,   500.,  1100.,   700.,     0.]])
with open('data.pickle', 'wb') as f:
    pickle.dump(data, f)
with open('data.pickle', 'rb') as f:
    data_new = pickle.load(f)
Corresp_matrix_etalon = data_new

import numpy as np
import scipy as scp

import csv
import scipy.io

u0 = np.zeros(3)
alpha0 = 45    
#print(alpha)
beta0 = 0
w0 = 0
#u0[0], u0[1], u0[2] = alpha, beta, w

N = []
L = []
W = []

def attraction_function(C, alpha, beta, w):
    f = np.exp(-alpha*C**beta)
    return f
def corresp_matrix(A,B,L,W,C):
    x = np.zeros((24,24))
    for i in range(len(L)):
        for j in range(len(W)):
            x[i,j] = A[i]*B[j]*L[i]*W[j]*C[i,j]**w*attraction_function(C[i,j], alpha, beta, w)
    return x
def count_sum(x,k):
    sum_x = np.sum(x,axis=k)
    return sum_x

FILENAME = "table.csv"
Number, L, W = [], [], []
with open(FILENAME, 'r') as file:
    reader = csv.reader(file)
    for row in reader:
        #print(row.split(';'))
        k = 0
        row[k] = row[k].split(';')
        for n in range(24):
            Number.append(float(row[k][3*n]))
            L.append(float(row[k][3*n+1]))
            W.append(float(row[k][3*n+2]))
Number, L, W =np.array(Number), np.array(L), np.array(W)

size = len(L)

FILENAME = "AvTimeAll.csv"
C = np.zeros((size,size))
with open(FILENAME, 'r') as file:
    reader = csv.reader(file)
    for row in reader:
        a = row[0]
        b = a.split(':')
        b0 = b[0].split(' ')
        b.pop(0)
        C_row = b0+b
        C[int(C_row[0])-1, int(C_row[1])-1] = float(C_row[2])

F1, F2, F3 = 0, 0, 0
J = np.zeros((3,3))
F = np.zeros(3)

A0 = np.zeros(size)
B0 = np.zeros(size)
A = np.zeros(size)
B = np.zeros(size)
x0 = np.zeros((size,size))


#print(A0[0])
summa_A = 0.
summa_B = 0.
step = 0
norm0, norm = 0, 0
#print(x0[0,0])
error, error1 = 0, []
h = 0.001
for p in range(10):
    alpha = alpha0 + 10000*p*h
    print('alpha=', alpha) 
    for q in range(10):
        beta = beta0 + q*h
        #print('beta=', beta)
        for l in range(10):
            w = w0 + 1000*l*h
            #print('w=', w)
            f  = attraction_function(C, alpha, beta, w)
            for i in range(size):
                A0[i] = 1./L[i]
            for j in range(size):
                B0[j] = 1./W[j]
            for j in range(size):
                summa_B = 0.
                for i in range(size):
                    summa_B += A0[i]*L[i]*C[i,j]**w*f[i,j]
                B[j] = 1./summa_B

            B0 = B.copy()
            for i in range(size):
                summa_A = 0.
                for j in range(size):
                    summa_A += B0[j]*W[j]*C[i,j]**w*f[i,j] 
                A[i] = 1./summa_A
            x = corresp_matrix(A,B,L,W,C)
            norm_w = count_sum(x,0) - W
            norm_l = count_sum(x,1) - L
            step=0
            while(np.linalg.norm(norm_w,2)>1e-6):
                if step>=2000:
                    break
                #print(np.linalg.norm(norm_w,2), step, alpha, beta, w)
                norm_w_check  = count_sum(x,0) - W
                A0 = A.copy()
                for j in range(size):
                    summa_B = 0.
                    for i in range(size):
                        summa_B += A0[i]*L[i]*C[i,j]**w*f[i,j]
                    B[j] = 1./summa_B
                B0 = B.copy()
                for i in range(size):
                    summa_A = 0.
                    for j in range(size):
                        summa_A += B0[j]*W[j]*C[i,j]**w*f[i,j] 
                    A[i] = 1./summa_A
                x = corresp_matrix(A,B,L,W,C)
                norm_w = count_sum(x,0) - W
                norm_l = count_sum(x,1) - L

                step += 1
            
            
            for i in range(size):
                for j in range(size):
                    error += ((x[i,j]-Corresp_matrix_etalon[i,j])**2)
            error1.append(error)
            error = 0
       
    #np.disp(error1)  
    print(np.argmin(error1), np.min(error1), np.shape(error1))
